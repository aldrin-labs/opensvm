{
  "@context": {
    "@vocab": "https://schema.org/",
    "opensvm": "https://opensvm.org/schema#",
    "solana": "https://solana.com/schema#",
    "nextjs": "https://nextjs.org/schema#",
    "implements": "opensvm:implements",
    "dependsOn": "opensvm:dependsOn",
    "exposes": "opensvm:exposes"
  },
  "@graph": [
    {
      "@type": "SoftwareApplication",
      "@id": "opensvm:Application",
      "name": "OpenSVM",
      "description": "Solana blockchain visualization and monitoring platform",
      "applicationSuite": "Next.js",
      "programmingLanguage": ["TypeScript", "JavaScript"],
      "implements": [
        {
          "@type": "opensvm:Architecture",
          "name": "Core Architecture",
          "components": [
            {
              "@type": "opensvm:Component",
              "@id": "opensvm:SolanaIntegration",
              "name": "Solana Integration",
              "description": "Core Solana blockchain interaction layer",
              "implements": [
                "Transaction parsing",
                "Account management",
                "Token operations",
                "RPC communication"
              ],
              "keyFiles": [
                "lib/solana.ts",
                "lib/solana-connection.ts"
              ]
            },
            {
              "@type": "opensvm:Component",
              "@id": "opensvm:KnowledgeGraph",
              "name": "Knowledge Graph Engine",
              "description": "Transaction and account relationship modeling",
              "implements": [
                "Graph construction",
                "Vector embeddings",
                "Relationship analysis",
                "Similarity search"
              ],
              "keyFiles": [
                "lib/server/qdrant.ts"
              ],
              "dependsOn": ["@qdrant/js-client-rest"]
            },
            {
              "@type": "opensvm:Component",
              "@id": "opensvm:Visualization",
              "name": "Data Visualization",
              "description": "Interactive blockchain data visualization",
              "implements": [
                "Transaction flows",
                "Account relationships",
                "Network metrics",
                "Token analytics"
              ],
              "keyFiles": [
                "components/TransactionFlowChart.tsx",
                "components/NetworkCharts.tsx"
              ],
              "dependsOn": ["d3"]
            }
          ]
        },
        {
          "@type": "opensvm:Architecture",
          "name": "Application Architecture",
          "components": [
            {
              "@type": "nextjs:AppRouter",
              "routes": [
                "/account/[address]",
                "/analytics",
                "/blocks",
                "/networks",
                "/nfts",
                "/tokens",
                "/tx/[signature]"
              ]
            },
            {
              "@type": "opensvm:APILayer",
              "endpoints": [
                "/api/account-stats",
                "/api/token-stats",
                "/api/historical-data",
                "/api/solana-rpc"
              ]
            }
          ]
        }
      ],
      "technicalFeatures": [
        {
          "@type": "opensvm:Feature",
          "name": "Real-time Monitoring",
          "description": "Live blockchain network metrics and transaction monitoring"
        },
        {
          "@type": "opensvm:Feature",
          "name": "Knowledge Graph Analysis",
          "description": "Vector-based transaction and account relationship analysis"
        },
        {
          "@type": "opensvm:Feature",
          "name": "Interactive Visualization",
          "description": "D3-powered interactive blockchain data visualization"
        }
      ],
      "developmentPatterns": [
        {
          "@type": "opensvm:Pattern",
          "name": "Component Architecture",
          "description": "Modular React components with TypeScript"
        },
        {
          "@type": "opensvm:Pattern",
          "name": "Data Flow",
          "description": "Unidirectional data flow with server-side data fetching"
        },
        {
          "@type": "opensvm:Pattern",
          "name": "API Design",
          "description": "RESTful API endpoints with rate limiting and caching"
        }
      ],
      "qualityAttributes": {
        "performance": {
          "metrics": ["Response time", "Transaction processing speed"],
          "optimizations": [
            "Caching layer",
            "Vector similarity search",
            "Batch processing"
          ]
        },
        "scalability": {
          "approaches": [
            "Distributed vector storage",
            "Rate limiting",
            "Connection pooling"
          ]
        },
        "maintainability": {
          "practices": [
            "TypeScript type safety",
            "Component modularity",
            "Comprehensive testing"
          ]
        }
      }
    }
  ]
}